# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import optimization_pb2 as optimization__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in optimization_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OptimizationServiceStub(object):
    """Main optimization service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OptimizeSchedule = channel.unary_unary(
                '/railway.optimization.OptimizationService/OptimizeSchedule',
                request_serializer=optimization__pb2.OptimizationRequest.SerializeToString,
                response_deserializer=optimization__pb2.OptimizationResponse.FromString,
                _registered_method=True)
        self.SimulateScenario = channel.unary_unary(
                '/railway.optimization.OptimizationService/SimulateScenario',
                request_serializer=optimization__pb2.SimulationRequest.SerializeToString,
                response_deserializer=optimization__pb2.SimulationResponse.FromString,
                _registered_method=True)
        self.ValidateSchedule = channel.unary_unary(
                '/railway.optimization.OptimizationService/ValidateSchedule',
                request_serializer=optimization__pb2.ValidationRequest.SerializeToString,
                response_deserializer=optimization__pb2.ValidationResponse.FromString,
                _registered_method=True)
        self.GetOptimizationStatus = channel.unary_unary(
                '/railway.optimization.OptimizationService/GetOptimizationStatus',
                request_serializer=optimization__pb2.StatusRequest.SerializeToString,
                response_deserializer=optimization__pb2.StatusResponse.FromString,
                _registered_method=True)


class OptimizationServiceServicer(object):
    """Main optimization service
    """

    def OptimizeSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SimulateScenario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptimizationStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OptimizationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OptimizeSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.OptimizeSchedule,
                    request_deserializer=optimization__pb2.OptimizationRequest.FromString,
                    response_serializer=optimization__pb2.OptimizationResponse.SerializeToString,
            ),
            'SimulateScenario': grpc.unary_unary_rpc_method_handler(
                    servicer.SimulateScenario,
                    request_deserializer=optimization__pb2.SimulationRequest.FromString,
                    response_serializer=optimization__pb2.SimulationResponse.SerializeToString,
            ),
            'ValidateSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateSchedule,
                    request_deserializer=optimization__pb2.ValidationRequest.FromString,
                    response_serializer=optimization__pb2.ValidationResponse.SerializeToString,
            ),
            'GetOptimizationStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptimizationStatus,
                    request_deserializer=optimization__pb2.StatusRequest.FromString,
                    response_serializer=optimization__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'railway.optimization.OptimizationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('railway.optimization.OptimizationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OptimizationService(object):
    """Main optimization service
    """

    @staticmethod
    def OptimizeSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/railway.optimization.OptimizationService/OptimizeSchedule',
            optimization__pb2.OptimizationRequest.SerializeToString,
            optimization__pb2.OptimizationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SimulateScenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/railway.optimization.OptimizationService/SimulateScenario',
            optimization__pb2.SimulationRequest.SerializeToString,
            optimization__pb2.SimulationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/railway.optimization.OptimizationService/ValidateSchedule',
            optimization__pb2.ValidationRequest.SerializeToString,
            optimization__pb2.ValidationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOptimizationStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/railway.optimization.OptimizationService/GetOptimizationStatus',
            optimization__pb2.StatusRequest.SerializeToString,
            optimization__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
