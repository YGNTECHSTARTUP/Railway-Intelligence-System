// This file is @generated by prost-build.
/// Core optimization request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptimizationRequest {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub section_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub time_horizon_minutes: u32,
    #[prost(message, repeated, tag = "4")]
    pub trains: ::prost::alloc::vec::Vec<Train>,
    #[prost(message, repeated, tag = "5")]
    pub constraints: ::prost::alloc::vec::Vec<Constraint>,
    #[prost(message, optional, tag = "6")]
    pub objective: ::core::option::Option<OptimizationObjective>,
    #[prost(message, repeated, tag = "7")]
    pub disruptions: ::prost::alloc::vec::Vec<DisruptionEvent>,
    #[prost(message, optional, tag = "8")]
    pub requested_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub config: ::core::option::Option<OptimizationConfig>,
}
/// Optimization response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptimizationResponse {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(enumeration = "OptimizationStatus", tag = "2")]
    pub status: i32,
    #[prost(message, repeated, tag = "3")]
    pub optimized_schedule: ::prost::alloc::vec::Vec<TrainScheduleEntry>,
    #[prost(message, optional, tag = "4")]
    pub kpis: ::core::option::Option<PerformanceMetrics>,
    #[prost(string, tag = "5")]
    pub reasoning: ::prost::alloc::string::String,
    #[prost(float, tag = "6")]
    pub confidence_score: f32,
    #[prost(message, repeated, tag = "7")]
    pub alternatives: ::prost::alloc::vec::Vec<AlternativeSchedule>,
    #[prost(uint64, tag = "8")]
    pub execution_time_ms: u64,
    #[prost(message, optional, tag = "9")]
    pub completed_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "10")]
    pub error_message: ::prost::alloc::string::String,
}
/// Train definition
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Train {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub train_number: u32,
    #[prost(enumeration = "TrainType", tag = "3")]
    pub train_type: i32,
    #[prost(enumeration = "TrainPriority", tag = "4")]
    pub priority: i32,
    #[prost(uint32, tag = "5")]
    pub capacity_passengers: u32,
    #[prost(float, tag = "6")]
    pub length_meters: f32,
    #[prost(float, tag = "7")]
    pub max_speed_kmh: f32,
    #[prost(message, optional, tag = "8")]
    pub scheduled_departure: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub scheduled_arrival: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "10")]
    pub origin_station: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub destination_station: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "12")]
    pub route_sections: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "13")]
    pub characteristics: ::core::option::Option<TrainCharacteristics>,
}
/// Train characteristics for optimization
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainCharacteristics {
    #[prost(float, tag = "1")]
    pub acceleration_ms2: f32,
    #[prost(float, tag = "2")]
    pub deceleration_ms2: f32,
    #[prost(float, tag = "3")]
    pub power_kw: f32,
    #[prost(float, tag = "4")]
    pub weight_tons: f32,
    #[prost(uint32, tag = "5")]
    pub passenger_load_percent: u32,
    #[prost(bool, tag = "6")]
    pub is_electric: bool,
    #[prost(string, repeated, tag = "7")]
    pub required_platforms: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Constraint definitions
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Constraint {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(enumeration = "ConstraintType", tag = "2")]
    pub r#type: i32,
    /// 1 = highest, 10 = lowest
    #[prost(uint32, tag = "3")]
    pub priority: u32,
    #[prost(map = "string, string", tag = "4")]
    pub parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(bool, tag = "5")]
    pub is_hard_constraint: bool,
}
/// Optimization objectives
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptimizationObjective {
    #[prost(enumeration = "ObjectiveType", tag = "1")]
    pub primary_objective: i32,
    #[prost(message, repeated, tag = "2")]
    pub secondary_objectives: ::prost::alloc::vec::Vec<WeightedObjective>,
    #[prost(float, tag = "3")]
    pub time_limit_seconds: f32,
    #[prost(bool, tag = "4")]
    pub enable_preprocessing: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeightedObjective {
    #[prost(enumeration = "ObjectiveType", tag = "1")]
    pub objective: i32,
    #[prost(float, tag = "2")]
    pub weight: f32,
}
/// Performance metrics
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PerformanceMetrics {
    #[prost(float, tag = "1")]
    pub total_delay_minutes: f32,
    #[prost(float, tag = "2")]
    pub average_delay_per_train: f32,
    #[prost(uint32, tag = "3")]
    pub conflicts_resolved: u32,
    #[prost(float, tag = "4")]
    pub throughput_trains_per_hour: f32,
    #[prost(float, tag = "5")]
    pub utilization_percent: f32,
    #[prost(float, tag = "6")]
    pub energy_consumption_kwh: f32,
    #[prost(uint32, tag = "7")]
    pub platform_changes: u32,
    #[prost(float, tag = "8")]
    pub passenger_waiting_time_minutes: f32,
}
/// Train schedule entry
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainScheduleEntry {
    #[prost(string, tag = "1")]
    pub train_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub train_number: u32,
    #[prost(message, optional, tag = "3")]
    pub scheduled_departure: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "4")]
    pub scheduled_arrival: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint32, tag = "5")]
    pub platform: u32,
    #[prost(enumeration = "TrainPriority", tag = "6")]
    pub priority_applied: i32,
    #[prost(int32, tag = "7")]
    pub delay_adjustment_minutes: i32,
    #[prost(string, repeated, tag = "8")]
    pub conflicts_resolved: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "9")]
    pub speed_profile: ::prost::alloc::vec::Vec<SpeedProfilePoint>,
}
/// Speed profile point
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpeedProfilePoint {
    #[prost(float, tag = "1")]
    pub position_km: f32,
    #[prost(float, tag = "2")]
    pub speed_kmh: f32,
    #[prost(float, tag = "3")]
    pub time_offset_minutes: f32,
}
/// Alternative schedule
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlternativeSchedule {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub schedule: ::prost::alloc::vec::Vec<TrainScheduleEntry>,
    #[prost(message, optional, tag = "4")]
    pub kpis: ::core::option::Option<PerformanceMetrics>,
    #[prost(string, tag = "5")]
    pub trade_offs: ::prost::alloc::string::String,
    #[prost(float, tag = "6")]
    pub score: f32,
}
/// Disruption event
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisruptionEvent {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(enumeration = "DisruptionType", tag = "2")]
    pub r#type: i32,
    #[prost(string, tag = "3")]
    pub affected_section: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "5")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// 1-10 scale
    #[prost(uint32, tag = "6")]
    pub severity: u32,
    #[prost(map = "string, string", tag = "7")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Simulation messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimulationRequest {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scenario_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub section_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub base_schedule: ::prost::alloc::vec::Vec<TrainScheduleEntry>,
    #[prost(message, repeated, tag = "5")]
    pub modifications: ::prost::alloc::vec::Vec<ScheduleModification>,
    #[prost(message, repeated, tag = "6")]
    pub what_if_conditions: ::prost::alloc::vec::Vec<WhatIfCondition>,
    #[prost(float, tag = "7")]
    pub simulation_duration_hours: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScheduleModification {
    #[prost(enumeration = "ModificationType", tag = "1")]
    pub r#type: i32,
    #[prost(string, tag = "2")]
    pub train_id: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WhatIfCondition {
    #[prost(enumeration = "ConditionType", tag = "1")]
    pub r#type: i32,
    #[prost(map = "string, string", tag = "2")]
    pub parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// 1-10 scale
    #[prost(uint32, tag = "3")]
    pub impact_level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimulationResponse {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub scenario_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub simulation_results: ::core::option::Option<SimulationResults>,
    #[prost(message, optional, tag = "5")]
    pub performance_comparison: ::core::option::Option<PerformanceComparison>,
    #[prost(string, repeated, tag = "6")]
    pub recommendations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimulationResults {
    #[prost(uint32, tag = "1")]
    pub total_trains_processed: u32,
    #[prost(float, tag = "2")]
    pub average_delay_minutes: f32,
    #[prost(float, tag = "3")]
    pub throughput_trains_per_hour: f32,
    #[prost(uint32, tag = "4")]
    pub conflicts_detected: u32,
    #[prost(float, tag = "5")]
    pub utilization_percent: f32,
    #[prost(message, repeated, tag = "6")]
    pub timeline_events: ::prost::alloc::vec::Vec<SimulationEvent>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimulationEvent {
    #[prost(message, optional, tag = "1")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "2")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub train_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub section_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub description: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PerformanceComparison {
    #[prost(float, tag = "1")]
    pub baseline_delay_minutes: f32,
    #[prost(float, tag = "2")]
    pub scenario_delay_minutes: f32,
    #[prost(float, tag = "3")]
    pub improvement_percent: f32,
    #[prost(float, tag = "4")]
    pub baseline_throughput: f32,
    #[prost(float, tag = "5")]
    pub scenario_throughput: f32,
    #[prost(float, tag = "6")]
    pub throughput_improvement_percent: f32,
}
/// Validation messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidationRequest {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub schedule: ::prost::alloc::vec::Vec<TrainScheduleEntry>,
    #[prost(message, repeated, tag = "3")]
    pub constraints: ::prost::alloc::vec::Vec<Constraint>,
    #[prost(string, tag = "4")]
    pub section_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidationResponse {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub is_valid: bool,
    #[prost(message, repeated, tag = "3")]
    pub errors: ::prost::alloc::vec::Vec<ValidationError>,
    #[prost(message, repeated, tag = "4")]
    pub warnings: ::prost::alloc::vec::Vec<ValidationWarning>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidationError {
    #[prost(string, tag = "1")]
    pub error_code: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub train_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidationWarning {
    #[prost(string, tag = "1")]
    pub warning_code: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub train_id: ::prost::alloc::string::String,
}
/// Status messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusRequest {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusResponse {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(enumeration = "ProcessingStatus", tag = "2")]
    pub status: i32,
    #[prost(float, tag = "3")]
    pub progress_percent: f32,
    #[prost(string, tag = "4")]
    pub current_phase: ::prost::alloc::string::String,
    #[prost(uint64, tag = "5")]
    pub estimated_completion_ms: u64,
}
/// Configuration
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptimizationConfig {
    #[prost(uint32, tag = "1")]
    pub max_solver_time_seconds: u32,
    #[prost(bool, tag = "2")]
    pub enable_preprocessing: bool,
    #[prost(uint32, tag = "3")]
    pub num_search_workers: u32,
    #[prost(enumeration = "SolverStrategy", tag = "4")]
    pub strategy: i32,
    #[prost(bool, tag = "5")]
    pub enable_detailed_logging: bool,
}
/// Constraint types
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ConstraintType {
    Unspecified = 0,
    SafetyDistance = 1,
    PlatformCapacity = 2,
    TrainPriority = 3,
    MaintenanceWindow = 4,
    SpeedLimit = 5,
    CrossingTime = 6,
    SignalSpacing = 7,
    EnergyEfficiency = 8,
    PassengerTransfer = 9,
}
impl ConstraintType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ConstraintType::Unspecified => "CONSTRAINT_TYPE_UNSPECIFIED",
            ConstraintType::SafetyDistance => "SAFETY_DISTANCE",
            ConstraintType::PlatformCapacity => "PLATFORM_CAPACITY",
            ConstraintType::TrainPriority => "TRAIN_PRIORITY",
            ConstraintType::MaintenanceWindow => "MAINTENANCE_WINDOW",
            ConstraintType::SpeedLimit => "SPEED_LIMIT",
            ConstraintType::CrossingTime => "CROSSING_TIME",
            ConstraintType::SignalSpacing => "SIGNAL_SPACING",
            ConstraintType::EnergyEfficiency => "ENERGY_EFFICIENCY",
            ConstraintType::PassengerTransfer => "PASSENGER_TRANSFER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CONSTRAINT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "SAFETY_DISTANCE" => Some(Self::SafetyDistance),
            "PLATFORM_CAPACITY" => Some(Self::PlatformCapacity),
            "TRAIN_PRIORITY" => Some(Self::TrainPriority),
            "MAINTENANCE_WINDOW" => Some(Self::MaintenanceWindow),
            "SPEED_LIMIT" => Some(Self::SpeedLimit),
            "CROSSING_TIME" => Some(Self::CrossingTime),
            "SIGNAL_SPACING" => Some(Self::SignalSpacing),
            "ENERGY_EFFICIENCY" => Some(Self::EnergyEfficiency),
            "PASSENGER_TRANSFER" => Some(Self::PassengerTransfer),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ObjectiveType {
    Unspecified = 0,
    MinimizeDelay = 1,
    MaximizeThroughput = 2,
    MinimizeEnergyConsumption = 3,
    MaximizeUtilization = 4,
    MinimizeConflicts = 5,
    BalancedOptimal = 6,
}
impl ObjectiveType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ObjectiveType::Unspecified => "OBJECTIVE_TYPE_UNSPECIFIED",
            ObjectiveType::MinimizeDelay => "MINIMIZE_DELAY",
            ObjectiveType::MaximizeThroughput => "MAXIMIZE_THROUGHPUT",
            ObjectiveType::MinimizeEnergyConsumption => "MINIMIZE_ENERGY_CONSUMPTION",
            ObjectiveType::MaximizeUtilization => "MAXIMIZE_UTILIZATION",
            ObjectiveType::MinimizeConflicts => "MINIMIZE_CONFLICTS",
            ObjectiveType::BalancedOptimal => "BALANCED_OPTIMAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OBJECTIVE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "MINIMIZE_DELAY" => Some(Self::MinimizeDelay),
            "MAXIMIZE_THROUGHPUT" => Some(Self::MaximizeThroughput),
            "MINIMIZE_ENERGY_CONSUMPTION" => Some(Self::MinimizeEnergyConsumption),
            "MAXIMIZE_UTILIZATION" => Some(Self::MaximizeUtilization),
            "MINIMIZE_CONFLICTS" => Some(Self::MinimizeConflicts),
            "BALANCED_OPTIMAL" => Some(Self::BalancedOptimal),
            _ => None,
        }
    }
}
/// Train types and priorities
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrainType {
    Unspecified = 0,
    Passenger = 1,
    Express = 2,
    Freight = 3,
    Mail = 4,
    Maintenance = 5,
    Empty = 6,
}
impl TrainType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TrainType::Unspecified => "TRAIN_TYPE_UNSPECIFIED",
            TrainType::Passenger => "PASSENGER",
            TrainType::Express => "EXPRESS",
            TrainType::Freight => "FREIGHT",
            TrainType::Mail => "MAIL",
            TrainType::Maintenance => "MAINTENANCE",
            TrainType::Empty => "EMPTY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "PASSENGER" => Some(Self::Passenger),
            "EXPRESS" => Some(Self::Express),
            "FREIGHT" => Some(Self::Freight),
            "MAIL" => Some(Self::Mail),
            "MAINTENANCE" => Some(Self::Maintenance),
            "EMPTY" => Some(Self::Empty),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrainPriority {
    Unspecified = 0,
    PriorityEmergency = 1,
    PriorityExpress = 2,
    PriorityMail = 3,
    PriorityPassenger = 4,
    PriorityFreight = 5,
    PriorityMaintenance = 6,
}
impl TrainPriority {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TrainPriority::Unspecified => "TRAIN_PRIORITY_UNSPECIFIED",
            TrainPriority::PriorityEmergency => "PRIORITY_EMERGENCY",
            TrainPriority::PriorityExpress => "PRIORITY_EXPRESS",
            TrainPriority::PriorityMail => "PRIORITY_MAIL",
            TrainPriority::PriorityPassenger => "PRIORITY_PASSENGER",
            TrainPriority::PriorityFreight => "PRIORITY_FREIGHT",
            TrainPriority::PriorityMaintenance => "PRIORITY_MAINTENANCE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_PRIORITY_UNSPECIFIED" => Some(Self::Unspecified),
            "PRIORITY_EMERGENCY" => Some(Self::PriorityEmergency),
            "PRIORITY_EXPRESS" => Some(Self::PriorityExpress),
            "PRIORITY_MAIL" => Some(Self::PriorityMail),
            "PRIORITY_PASSENGER" => Some(Self::PriorityPassenger),
            "PRIORITY_FREIGHT" => Some(Self::PriorityFreight),
            "PRIORITY_MAINTENANCE" => Some(Self::PriorityMaintenance),
            _ => None,
        }
    }
}
/// Optimization status
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OptimizationStatus {
    Unspecified = 0,
    Optimal = 1,
    Feasible = 2,
    Infeasible = 3,
    Unknown = 4,
    TimeLimitExceeded = 5,
    Error = 6,
}
impl OptimizationStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OptimizationStatus::Unspecified => "OPTIMIZATION_STATUS_UNSPECIFIED",
            OptimizationStatus::Optimal => "OPTIMAL",
            OptimizationStatus::Feasible => "FEASIBLE",
            OptimizationStatus::Infeasible => "INFEASIBLE",
            OptimizationStatus::Unknown => "UNKNOWN",
            OptimizationStatus::TimeLimitExceeded => "TIME_LIMIT_EXCEEDED",
            OptimizationStatus::Error => "ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OPTIMIZATION_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "OPTIMAL" => Some(Self::Optimal),
            "FEASIBLE" => Some(Self::Feasible),
            "INFEASIBLE" => Some(Self::Infeasible),
            "UNKNOWN" => Some(Self::Unknown),
            "TIME_LIMIT_EXCEEDED" => Some(Self::TimeLimitExceeded),
            "ERROR" => Some(Self::Error),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DisruptionType {
    Unspecified = 0,
    SignalFailure = 1,
    TrackMaintenance = 2,
    Weather = 3,
    Accident = 4,
    PowerOutage = 5,
    EquipmentFailure = 6,
}
impl DisruptionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DisruptionType::Unspecified => "DISRUPTION_TYPE_UNSPECIFIED",
            DisruptionType::SignalFailure => "SIGNAL_FAILURE",
            DisruptionType::TrackMaintenance => "TRACK_MAINTENANCE",
            DisruptionType::Weather => "WEATHER",
            DisruptionType::Accident => "ACCIDENT",
            DisruptionType::PowerOutage => "POWER_OUTAGE",
            DisruptionType::EquipmentFailure => "EQUIPMENT_FAILURE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DISRUPTION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "SIGNAL_FAILURE" => Some(Self::SignalFailure),
            "TRACK_MAINTENANCE" => Some(Self::TrackMaintenance),
            "WEATHER" => Some(Self::Weather),
            "ACCIDENT" => Some(Self::Accident),
            "POWER_OUTAGE" => Some(Self::PowerOutage),
            "EQUIPMENT_FAILURE" => Some(Self::EquipmentFailure),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ModificationType {
    Unspecified = 0,
    DelayTrain = 1,
    CancelTrain = 2,
    AddTrain = 3,
    ChangeRoute = 4,
    ChangePriority = 5,
}
impl ModificationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ModificationType::Unspecified => "MODIFICATION_TYPE_UNSPECIFIED",
            ModificationType::DelayTrain => "DELAY_TRAIN",
            ModificationType::CancelTrain => "CANCEL_TRAIN",
            ModificationType::AddTrain => "ADD_TRAIN",
            ModificationType::ChangeRoute => "CHANGE_ROUTE",
            ModificationType::ChangePriority => "CHANGE_PRIORITY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MODIFICATION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "DELAY_TRAIN" => Some(Self::DelayTrain),
            "CANCEL_TRAIN" => Some(Self::CancelTrain),
            "ADD_TRAIN" => Some(Self::AddTrain),
            "CHANGE_ROUTE" => Some(Self::ChangeRoute),
            "CHANGE_PRIORITY" => Some(Self::ChangePriority),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ConditionType {
    Unspecified = 0,
    ConditionWeatherDisruption = 1,
    ConditionSignalFailure = 2,
    ConditionTrackMaintenance = 3,
    ConditionIncreasedDemand = 4,
    ConditionEquipmentFailure = 5,
}
impl ConditionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ConditionType::Unspecified => "CONDITION_TYPE_UNSPECIFIED",
            ConditionType::ConditionWeatherDisruption => "CONDITION_WEATHER_DISRUPTION",
            ConditionType::ConditionSignalFailure => "CONDITION_SIGNAL_FAILURE",
            ConditionType::ConditionTrackMaintenance => "CONDITION_TRACK_MAINTENANCE",
            ConditionType::ConditionIncreasedDemand => "CONDITION_INCREASED_DEMAND",
            ConditionType::ConditionEquipmentFailure => "CONDITION_EQUIPMENT_FAILURE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CONDITION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "CONDITION_WEATHER_DISRUPTION" => Some(Self::ConditionWeatherDisruption),
            "CONDITION_SIGNAL_FAILURE" => Some(Self::ConditionSignalFailure),
            "CONDITION_TRACK_MAINTENANCE" => Some(Self::ConditionTrackMaintenance),
            "CONDITION_INCREASED_DEMAND" => Some(Self::ConditionIncreasedDemand),
            "CONDITION_EQUIPMENT_FAILURE" => Some(Self::ConditionEquipmentFailure),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProcessingStatus {
    Unspecified = 0,
    Queued = 1,
    Processing = 2,
    Completed = 3,
    Failed = 4,
    Cancelled = 5,
}
impl ProcessingStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ProcessingStatus::Unspecified => "PROCESSING_STATUS_UNSPECIFIED",
            ProcessingStatus::Queued => "QUEUED",
            ProcessingStatus::Processing => "PROCESSING",
            ProcessingStatus::Completed => "COMPLETED",
            ProcessingStatus::Failed => "FAILED",
            ProcessingStatus::Cancelled => "CANCELLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PROCESSING_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "QUEUED" => Some(Self::Queued),
            "PROCESSING" => Some(Self::Processing),
            "COMPLETED" => Some(Self::Completed),
            "FAILED" => Some(Self::Failed),
            "CANCELLED" => Some(Self::Cancelled),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SolverStrategy {
    Unspecified = 0,
    Automatic = 1,
    FixedSearch = 2,
    PortfolioSearch = 3,
    LpSearch = 4,
}
impl SolverStrategy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SolverStrategy::Unspecified => "SOLVER_STRATEGY_UNSPECIFIED",
            SolverStrategy::Automatic => "AUTOMATIC",
            SolverStrategy::FixedSearch => "FIXED_SEARCH",
            SolverStrategy::PortfolioSearch => "PORTFOLIO_SEARCH",
            SolverStrategy::LpSearch => "LP_SEARCH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SOLVER_STRATEGY_UNSPECIFIED" => Some(Self::Unspecified),
            "AUTOMATIC" => Some(Self::Automatic),
            "FIXED_SEARCH" => Some(Self::FixedSearch),
            "PORTFOLIO_SEARCH" => Some(Self::PortfolioSearch),
            "LP_SEARCH" => Some(Self::LpSearch),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod optimization_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Main optimization service
    #[derive(Debug, Clone)]
    pub struct OptimizationServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl OptimizationServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> OptimizationServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> OptimizationServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            OptimizationServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn optimize_schedule(
            &mut self,
            request: impl tonic::IntoRequest<super::OptimizationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OptimizationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/railway.optimization.OptimizationService/OptimizeSchedule",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "railway.optimization.OptimizationService",
                        "OptimizeSchedule",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn simulate_scenario(
            &mut self,
            request: impl tonic::IntoRequest<super::SimulationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SimulationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/railway.optimization.OptimizationService/SimulateScenario",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "railway.optimization.OptimizationService",
                        "SimulateScenario",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn validate_schedule(
            &mut self,
            request: impl tonic::IntoRequest<super::ValidationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/railway.optimization.OptimizationService/ValidateSchedule",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "railway.optimization.OptimizationService",
                        "ValidateSchedule",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_optimization_status(
            &mut self,
            request: impl tonic::IntoRequest<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/railway.optimization.OptimizationService/GetOptimizationStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "railway.optimization.OptimizationService",
                        "GetOptimizationStatus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
